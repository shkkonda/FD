map('county', 'united states')
data(usaMapEnv)
map('county', 'united states')
map('county', 'usa')
map('county', c('new jersey', 'california'))
m <- map('county', c('new jersey', 'california'))
m
m <- map('county', c('new jersey', 'california'), fill=TRUE)
m
m <- map('county', c('new jersey', 'california'), fill=TRUE, col = palette())
m <- map('county', c('new jersey', 'california'), fill=TRUE, col = c("#FFF", "#000"))
m <- map('county', c('new jersey', 'california'), fill=TRUE, col = c("#FFFFFF", "#000000"))
m <- map('county', c('new jersey'), fill=TRUE, col = c("#FFFFFF", "#000000"))
m <- map('county', c('new jersey'), fill=TRUE, col = c("#FFFFFF", "#666666"))
m <- map('county', c('new jersey'), fill=TRUE, col = c("#FFFFFF", "#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#FFFFFF","#666666"))
m <- map('county', c('new jersey,sussex'), fill=TRUE, col = c("#FFFFFF", "#666666"))
m <- map('county', c('arizona,madison county'), fill=TRUE, col = c("#FFFFFF", "#666666"))
m <- map('county', c('arizona,madison'), fill=TRUE, col = c("#FFFFFF", "#666666"))
library(ggplot2)
library(maps)
county_df <- map_data("country")
read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba
is.data.frame(nba)
nba <- nba[order(nba$PTS),]
?heatmap
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba <- nba[order(nba$PTS),]#
row.names(nba) <- nba$Name#
nba <- nba[,2:20]#
#
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
install.packages("RColorBrewer")
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
library("RColorBrewer")
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = brewer.pal(9, "Blues"), scale="column", margins=c(5,10))
?cm.colors
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
library(maptools)
?maptools
library("RColorBrewer")
?brewer
library(portfolio)
data(dow.jan.2005)
map.market(id = dow.jan.2005$symbol, area=dow.jan.2005$price, group=dow.jan.2005$sector)
map.market(id = dow.jan.2005$symbol, area=dow.jan.2005$price, group=dow.jan.2005$sector, color=100*dow.jan.2005$month.ret)
100*dow.jan.2005$month.ret
dow.jan.2005
map.market(area=dow.jan.2005$price, group=dow.jan.2005$sector, color=100*dow.jan.2005$month.ret)
map.market(id = dow.jan.2005$symbol, area=dow.jan.2005$price, group=dow.jan.2005$sector, color=100*dow.jan.2005$month.ret)
map.market
?colorRamp
data <- read.csv("http://datasets.flowingdata.com/post-data.txt")
packages.install(portfolio)
install.packages(portfolio)
install.packages("portfolio")
library(portfolio)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
treemap <- function (id, area, group, color, scale = NULL, lab = c(TRUE, #
    FALSE), main = "Map of the Market", print = TRUE) #
{#
    if (any(length(id) != length(area), length(id) != length(group), #
        length(id) != length(color))) {#
        stop("id, area, group, and color must be the same length.")#
    }#
    if (length(lab) == 1) {#
        lab[2] <- lab[1]#
    }#
    stopifnot(all(!is.na(id)))#
    data <- data.frame(label = id, group, area, color)#
    data <- data[order(data$area, decreasing = TRUE), ]#
    if (any(is.na(data$area) | is.na(data$group) | is.na(data$color))) {#
        warning("Stocks with NAs for area, group, or color will not be shown")#
        data <- subset(data, !is.na(area) & !is.na(group) & !is.na(color))#
    }#
    if (nrow(data) == 0) {#
        stop("No records to display")#
    }#
    data$color.orig <- data$color#
    if (is.null(scale)) {#
        data$color <- data$color * 1/max(abs(data$color))#
    }#
    else {#
        data$color <- data$color * 1/scale#
    }#
    data.by.group <- split(data, data$group, drop = TRUE)#
    group.data <- lapply(data.by.group, function(x) {#
        sum(x[, 3])#
    })#
    group.data <- data.frame(area = as.numeric(group.data), label = names(group.data))#
    group.data <- group.data[order(group.data$area, decreasing = TRUE), #
        ]#
    group.data$color <- rep(NULL, nrow(group.data))#
    color.ramp.pos <- colorRamp(c("white", "black"))#
    color.ramp.neg <- colorRamp(c("white", "red"))#
    color.ramp.rgb <- function(x) {#
        col.mat <- mapply(function(x) {#
            if (x < 0) {#
                color.ramp.neg(abs(x))#
            }#
            else {#
                color.ramp.pos(abs(x))#
            }#
        }, x)#
        mapply(rgb, col.mat[1, ], col.mat[2, ], col.mat[3, ], #
            max = 255)#
    }#
    add.viewport <- function(z, label, color, x.0, y.0, x.1, #
        y.1) {#
        for (i in 1:length(label)) {#
            if (is.null(color[i])) {#
                filler <- gpar(col = "blue", fill = "transparent", #
                  cex = 1)#
            }#
            else {#
                filler.col <- color.ramp.rgb(color[i])#
                filler <- gpar(col = filler.col, fill = filler.col, #
                  cex = 0.6)#
            }#
            new.viewport <- viewport(x = x.0[i], y = y.0[i], #
                width = (x.1[i] - x.0[i]), height = (y.1[i] - #
                  y.0[i]), default.units = "npc", just = c("left", #
                  "bottom"), name = as.character(label[i]), clip = "on", #
                gp = filler)#
            z <- append(z, list(new.viewport))#
        }#
        z#
    }#
    squarified.treemap <- function(z, x = 0, y = 0, w = 1, h = 1, #
        func = add.viewport, viewport.list) {#
        cz <- cumsum(z$area)/sum(z$area)#
        n <- which.min(abs(log(max(w/h, h/w) * sum(z$area) * #
            ((cz^2)/z$area))))#
        more <- n < length(z$area)#
        a <- c(0, cz[1:n])/cz[n]#
        if (h > w) {#
            viewport.list <- func(viewport.list, z$label[1:n], #
                z$color[1:n], x + w * a[1:(length(a) - 1)], rep(y, #
                  n), x + w * a[-1], rep(y + h * cz[n], n))#
            if (more) {#
                viewport.list <- Recall(z[-(1:n), ], x, y + h * #
                  cz[n], w, h * (1 - cz[n]), func, viewport.list)#
            }#
        }#
        else {#
            viewport.list <- func(viewport.list, z$label[1:n], #
                z$color[1:n], rep(x, n), y + h * a[1:(length(a) - #
                  1)], rep(x + w * cz[n], n), y + h * a[-1])#
            if (more) {#
                viewport.list <- Recall(z[-(1:n), ], x + w * #
                  cz[n], y, w * (1 - cz[n]), h, func, viewport.list)#
            }#
        }#
        viewport.list#
    }#
    map.viewport <- viewport(x = 0.05, y = 0.05, width = 0.9, #
        height = 0.75, default.units = "npc", name = "MAP", just = c("left", #
            "bottom"))#
    map.tree <- gTree(vp = map.viewport, name = "MAP", children = gList(rectGrob(gp = gpar(col = "dark grey"), #
        name = "background")))#
    group.viewports <- squarified.treemap(z = group.data, viewport.list = list())#
    for (i in 1:length(group.viewports)) {#
        this.group <- data.by.group[[group.data$label[i]]]#
        this.data <- data.frame(this.group$area, this.group$label, #
            this.group$color)#
        names(this.data) <- c("area", "label", "color")#
        stock.viewports <- squarified.treemap(z = this.data, #
            viewport.list = list())#
        group.tree <- gTree(vp = group.viewports[[i]], name = group.data$label[i])#
        for (s in 1:length(stock.viewports)) {#
            stock.tree <- gTree(vp = stock.viewports[[s]], name = this.data$label[s], #
                children = gList(rectGrob(name = "color")))#
            if (lab[2]) {#
                stock.tree <- addGrob(stock.tree, textGrob(x = unit(1, #
                  "lines"), y = unit(1, "npc") - unit(1, "lines"), #
                  label = this.data$label[s], gp = gpar(col = "white"), #
                  name = "label", just = c("left", "top")))#
            }#
            group.tree <- addGrob(group.tree, stock.tree)#
        }#
        group.tree <- addGrob(group.tree, rectGrob(gp = gpar(col = "grey"), #
            name = "border"))#
        if (lab[1]) {#
            group.tree <- addGrob(group.tree, textGrob(label = group.data$label[i], #
                name = "label", gp = gpar(col = "white")))#
        }#
        map.tree <- addGrob(map.tree, group.tree)#
    }#
    op <- options(digits = 1)#
    top.viewport <- viewport(x = 0.05, y = 1, width = 0.9, height = 0.2, #
        default.units = "npc", name = "TOP", , just = c("left", #
            "top"))#
    legend.ncols <- 51#
    l.x <- (0:(legend.ncols - 1))/(legend.ncols)#
    l.y <- unit(0.25, "npc")#
    l.cols <- color.ramp.rgb(seq(-1, 1, by = 2/(legend.ncols - #
        1)))#
    l.end <- max(abs(data$color.orig))#
    top.list <- gList(textGrob(label = main, y = unit(0.7, "npc"), #
        just = c("center", "center"), gp = gpar(cex = 2)), segmentsGrob(x0 = seq(0, #
        1, by = 0.25), y0 = unit(0.25, "npc"), x1 = seq(0, 1, #
        by = 0.25), y1 = unit(0.2, "npc")), rectGrob(x = l.x, #
        y = l.y, width = 1/legend.ncols, height = unit(1, "lines"), #
        just = c("left", "bottom"), gp = gpar(col = NA, fill = l.cols), #
        default.units = "npc"), textGrob(label = format(l.end * #
        seq(-1, 1, by = 0.5), trim = TRUE), x = seq(0, 1, by = 0.25), #
        y = 0.1, default.units = "npc", just = c("center", "center"), #
        gp = gpar(col = "black", cex = 0.8, fontface = "bold")))#
    options(op)#
    top.tree <- gTree(vp = top.viewport, name = "TOP", children = top.list)#
    mapmarket <- gTree(name = "MAPMARKET", children = gList(rectGrob(gp = gpar(col = "dark grey", #
        fill = "dark grey"), name = "background"), top.tree, #
        map.tree))#
    if (print) {#
        grid.newpage()#
        grid.draw(mapmarket)#
    }#
    invisible(mapmarket)#
}
treemap(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
data <- read.csv("http://datasets.flowingdata.com/post-data.txt")
library(portfolio)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
data
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
?runif
runif(0, 100, 5)
runif(10, 0, 1)
runif(10, 0, 1) * 100
round( runif(10, 0, 1) * 100, 0)
round( runif(5, 0, 1) * 10, 0 )
round( runif(5, 0, 1) * 100, 0 )
r <- runif(5, 0, 1) * 100
sum(r)
r
r / sum(r)
r <- r / sum(r) * 100
r
r / sum(r) * 100
round(r / sum(r) * 100)
sum(round(r / sum(r)) * 100)
round(r / sum(r))
sum(r)
round(r / sum(r) * 100)
sum( round(r / sum(r) * 100) )
r <- runif(5, 0, 1) * 100#
round(r / sum(r) * 100)
round(r / sum(r) * 100, 1)
r <- runif(5, 0, 1) * 100#
round(r / sum(r) * 100, 1)
?sample
10^2
1:10
1:10:2
1:2:10
?seq
i = 1:10
i
si = 10 * 10^( (i-1)/2 )
si
sample(si, 2, replace=FALSE)
si = 10 * 10^( (i-1)/12 )
SI
si
sample(si, 2, replace=FALSE)
round( runif(8, 0, 1) * 100 )
sample(si, 2, replace=FALSE)
sample(si, 2, replace=FALSE)#
round( runif(8, 0, 1) * 100 )
round( runif(8, 0.05, 1) * 100 )
runif(8, 0.05, 1)
sample(si, 2, replace=FALSE)#
round( runif(8, 0.05, 1) * 100 )
si
sample(si, 2, replace=FALSE)#
round( runif(8, 0.05, 1) * 100 )
sample(si, 2, replace=FALSE)#
round( runif(8, 0.05, 1) * 50 )
sample(si, 2, replace=FALSE)#
round( runif(8, 0.05, 1) * 35 )
sample(si, 2, replace=FALSE)#
round( runif(8, 0.05, 1) * 20 )
round( runif(5, 0.05, 1) * 100 )
i = 1:10#
si = 10 * 10^( (i-1)/12 )#
sample(si, 2, replace=FALSE)#
round( runif(3, 0.05, 1) * 100 )
sample(si, 2, replace=FALSE)#
round( runif(3, 0.05, 1) * 100 )
?scatter.smooth
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")#
unemployment[1:10,]
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11))
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), col="#CCCCCC")
n <- 2
r_sort <- runif(n, 0, 1) * 100; sort( round(r_sort / sum(r_sort) * 100, 1), decreasing=T )
n <- 3
r_sort <- runif(n, 0, 1) * 100; sort( round(r_sort / sum(r_sort) * 100, 1), decreasing=T )
n <- 4
r_sort <- runif(n, 0, 1) * 100; sort( round(r_sort / sum(r_sort) * 100, 1), decreasing=T )
n <- 5
r_sort <- runif(n, 0, 1) * 100; sort( round(r_sort / sum(r_sort) * 100, 1), decreasing=T )
n <- 6
r_sort <- runif(n, 0, 1) * 100; sort( round(r_sort / sum(r_sort) * 100, 1), decreasing=T )
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")
p <- scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
p
p <- scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
p
?scatter.smooth
p <- loess.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
p
loess.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
p$x
crime_rates <- read.csv("crimeRatesByState-formatted.csv")
library(aplpack)
crime_rates[1:6,]
faces(crime_rates[1:6, 2:8], labels=crime_rates[1:6]$state)
cbind(crime_rates[1:6, 2:6], c(0,0,0,0,0,0), crime_rates[1:6, 7:8], labels=crime_rates[1:6]$state)
cbind(crime_rates[1:6, 2:6], c(0,0,0,0,0,0), crime_rates[1:6, 7:8])
testing <- cbind(crime_rates[1:6, 2:6], c(0,0,0,0,0,0), crime_rates[1:6, 7:8])
faces(testing, labels=crime_rates[1:6]$state)
?rep
rep(0, 4)
rep(0, length(crime_reports$state))
rep(0, length(crime_rates$state))
crime_filled <- cbind(crime_rates[, 2:6], rep(0, length(crime_rates$state)), crime_rates[, 7:8])
crime_filled[1:2,]
faces(crime_filled, labels=crime_filled$state)
crime_filled
crime_rates <- read.csv("crimeRatesByState-formatted.csv")
crime_filled <- cbind(crime_rates[, 2:6], rep(0, length(crime_rates$state)), crime_rates[, 7:8])
faces(crime_filled, labels=crime_rates$state)
faces(crime_filled, labels=crime_rates$state, nrow=5)
faces(crime_filled, labels=crime_rates$state, nrow=5)
faces(crime_filled, labels=crime_rates$state, nrow=5)
faces(crime_filled, labels=crime_rates$state, nrow=10)
faces(crime_filled, labels=crime_rates$state, ncol=5)
faces(crime_filled, labels=crime_rates$state, ncol=6)
faces(crime_filled, labels=crime_rates$state, ncol=6)
faces(crime_filled, labels=crime_rates$state, ncol=7)
crime_rates <- read.csv("crimeRatesByState-formatted.csv")
crime_filled <- cbind(crime_rates[, 2:6], rep(0, length(crime_rates$state)), crime_rates[, 7:8])
face(crime_filled, labels=crime_filled$state)
faces(crime_filled, labels=crime_filled$state)
crime_filled <- cbind(crime_rates[, 1:6], rep(0, length(crime_rates$state)), crime_rates[, 7:8])
faces(crime_filled[,2:8], labels=crime_filled$state)
faces(crime_filled[,2:8], labels=crime_filled$state, ncol=7)
faces(crime_filled[,2:8], labels=crime_filled$state, ncol=7, scale=False)
faces(crime_filled[,2:8], labels=crime_filled$state, ncol=7, scale=FALSE)
faces(crime_filled[,2:8], labels=crime_filled$state, ncol=7)
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
faces(crime[,2:6], labels=crime$state)
faces(crime[1:6,2:8], labels=crime$state)
faces(crime[,2:8], labels=crime$state)
crime_filled <- cbind(crime[,2:6], rep(0, length(crime$state), crime[,7:8])
)
crime_filled[1:4,]
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state), crime[,7:8])
)
crime_filled[1:4,]
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state), crime[,7:8]))#
faces(crime_filled[,2:8])
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state), crime[,7:8]))
faces(crime_filled[,2:8])
crime_filled[,2:8]
crime_filled[1:4,]
crime[1:2,]
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state)), crime[,7:8])
faces(crime_filled[,2:8])
faces(crime_filled[,2:8], labels=crime_filled$state)
library(aplpack)
faces(crime[,2:8])
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state)), crime[,7:8])#
faces(crime_filled[,2:8])
faces(crime_filled[,2:8], labels=crime_filled$state)
